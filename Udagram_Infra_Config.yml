AWSTemplateFormatVersion: 2010-09-09
Description: Udagram - High Availability Web App

Parameters:

  # Project Name
    ProjectName:
      Description: Name of the Project
      Type: String

  # Project VPC CIDR
    VPCCIDR:
      Description: IP Range for the Project
      Type: String
      Default: 10.0.0.0/16

   # Project Public Subnet 1
    PublicSubnet1CIDR:
      Description: Enter the IP range
      Type: String
      Default: 10.0.0.0/24

  # Project Public Subnet 1
    PublicSubnet2CIDR:
      Description: Enter the IP range
      Type: String
      Default: 10.0.1.0/24

  # Project Private Subnet 1
    PrivateSubnet1CIDR:
      Description: Enter the IP range
      Type: String
      Default: 10.0.2.0/24

  # Project Private Subnet 2
    PrivateSubnet2CIDR:
      Description: Enter the IP range
      Type: String
      Default: 10.0.3.0/24



Resources:
  
# Creating VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      Tags:
        - 
          Key: Name  
          Value: !Ref ProjectName 


# Adding Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Ref ProjectName
         

# Adding InternetGatewayAttachment (required with Internet Gateway)
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


# Adding Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Public Subnet 1 (AZ0)

# Adding Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Public Subnet 2 (AZ1)

# Adding Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Private Subnet (AZ0)


# Adding Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Private Subnet (AZ1)


# Adding NAT Gateway / Creating Nat Gateways EIP (Elastic IP)
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway1EIP.AllocationId  # Retreving EIP IP
      SubnetId: !Ref PublicSubnet1

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId    # Retreving EIP IP
      SubnetId: !Ref PublicSubnet2

# Adding PUBLIC Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Public Routes

# Default Routing Rule - Public Rule  (Send all traffic to Internet Gateway)
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # Rule: send all traffic to Internet Gateway. (next line)
      GatewayId: !Ref InternetGateway

#  Applying routing rule to Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1   

 #  Applying routing rule to Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Adding PRIVATE Route Table
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: Name
          Value: !Sub ${ProjectName} Private Routes 

# Default Routing Rule - Private Subnet Rule
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0  # send all traffic to Nat Gateway
      NatGatewayId: !Ref NatGateway1
  
#  Applying routing rule to Private Subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  
#  Applying routing rule to Private Subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

# Creating Load BAlancer Security Group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load BAlancer
      VpcId: !Ref VPC

      # Inbound Traffic Rules 
          # allowing traffic from port 80 to 80 from everywhere
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # Outbound Traffic Rules
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

# Creating Security Group for Web Servers (EC2 Instance under Private Subnets)
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and/Or SSH from local only
      VpcId: !Ref VPC
      # Inbound rule
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        
        # For Testing purpose only. Close the port once everything is working as expected.
        # Adding Additional Rule (SSH)
#      - IpProtocol: tcp
#        FromPort: 22
#        ToPort: 22
#        CidrIp: 0.0.0.0/0

      # Outbound Traffic Rules
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

# Creating Web Server Launch Configuration
  LaunchWebServerInstance:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udagram-app/index.html /var/www/html
      IamInstanceProfile: arn:aws:iam::718543789873:instance-profile/s3-read-only-role   # Iam role for s3 full access!
      ImageId: ami-07b4f3c02c7f83d59  # Ubuntu Server 18.04
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t2.medium   # 2 vCPU & 4GB RAM
      KeyName: UdagramKey
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'   # 10 GB Hard Drive Space
          DeleteOnTermination: "true"

 # Creating Auto Scaling Group
  WebAppScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${ProjectName} EC2 Instances
      VPCZoneIdentifier: 
      - 
        !Ref PrivateSubnet1
        
      -
        !Ref PrivateSubnet2
        
      LaunchConfigurationName: 
        Ref: LaunchWebServerInstance
      MinSize: 4
      MaxSize: 4
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

# Adding Target Groups and Listeners

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      -
        !Ref PublicSubnet1
      -
        !Ref PublicSubnet2

      SecurityGroups:
      - Ref: LBSecGroup
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]  # update here if you have 2 application. for eg: [app1/app2]
      ListenerArn: !Ref 'Listener'
      Priority: 1
  
  # creating WebAppTargetGroup
  # Cheecking if we get the response or not; if not then load-
  # -Balancer will kick in and create new instance if it's unhealthy
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
       HealthCheckIntervalSeconds: 20
       HealthCheckPath: /
       HealthCheckProtocol: HTTP
       HealthCheckTimeoutSeconds: 16
       HealthyThresholdCount: 2   # if get 2 valid response > healthy
       Port: 80
       Protocol: HTTP
       UnhealthyThresholdCount: 5  # it will try 5 times > declare unhealthy with interval sets to 20 seconds.
       VpcId: !Ref VPC
          
 # Creating S3 Bucket   
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      BucketName: udagram-app
      





      
# Outputs Section
Outputs:
  LBURL:
    # Value: !GetAtt WebAppLB.DNSName        # Getting the URL from the LoadBalancer (WebAppLB Resource)
    # Adding http:// and joining the URL/DNS Name together
    Value: !Join    
      - ''
      - - 'http://'
        - !GetAtt 
          - WebAppLB
          - DNSName
    Export:
      Name: !Sub "${ProjectName}-Public-URL"
